generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @unique
  token_type        String?
  refresh_token     String? @db.String
  access_token      String? @db.String
  id_token          String? @db.String
  scope             String?
  session_state     String?
  expires_at        Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  @@unique([provider, providerAccountId])
  @@map("account")
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  email    String?   @unique
  image    String?
  phone    String?
  accounts Account[]
  sessions Session[]
  Product  Product[]
  Group    Group[]   @relation("user")

  @@map("user")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?   @db.String
  merchant_name String
  userId        String?   @unique @db.ObjectId
  createdBy     String
  user          User?     @relation("user", fields: [userId], references: [id])
  Product       Product[]
}

model Product {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  price    Int
  quantity Int
  userId   String  @db.ObjectId
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId  String  @db.ObjectId
  group    Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
}
